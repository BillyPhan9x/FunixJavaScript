"use strict";

// Lab 5.1- 5.7
// Lab 5.1 Gi·ªõi thi·ªáu v·ªÅ Object
console.log("Lab 5.1 Gi·ªõi thi·ªáu v·ªÅ Object ==>");

// 1. T·∫°o m·ªôt object l√† 'myCountry' cho qu·ªëc gia b·∫°n ch·ªçn, ch·ª©a c√°c thu·ªôc t√≠nh 'country', 'capital', 'language', 'population' and 'neighbours' (array nh∆∞ ch√∫ng ta ƒë√£ th·ª±c h√†nh trong b√†i tr∆∞·ªõc).

const myCountry = {
  country: "Finland",
  capital: "Helsinki",
  language: "finnish",
  population: 6,
  neighbours: ["Switzerland", "Russia", "Norway"],
};
// console.log(myCountry);
console.log(myCountry.neighbours[2]);
// const myNation = {
//     country: 'VietNam',
//     capital: 'HaNoi',
//     language: 'vietnamese',
//     population: 98,
//     neighbours: ['Lao', 'Camphuchia', 'China'],
//     describe: function () {
//         console.log(this);
//         console.log(` ${this.country} has ${this.population} million ${this.language}-speaking people, ${this.neighbours.length} neighbouring countries and a capital called ${this.capital}.`);
//     }
// };
// console.log(myNation);

// Lab 5.2 D·∫•u ch·∫•m v·ªõi d·∫•u ngo·∫∑c
console.log("Lab 5.2 D·∫•u ch·∫•m v·ªõi d·∫•u ngo·∫∑c ==>");

// 1. S·ª≠ d·ª•ng object t·ª´ b√†i t·∫≠p tr∆∞·ªõc, in string sau ra console: 'Finland has 6 million finnish-speaking people, 3 neighbouring countries and a capital called Helsinki.'

console.log(
  ` ${myCountry.country} has ${myCountry.population} million ${myCountry.language}-speaking people, ${myCountry.neighbours.length} neighbouring countries and a capital called ${myCountry.capital}.`
);

// console.log(` ${myNation.country} has ${myNation.population} million ${myNation.language}-speaking people, ${myNation.neighbours.length} neighbouring countries and a capital called ${myNation.capital}.`);

// 2. TƒÉng d√¢n s·ªë c·ªßa ƒë·∫•t n∆∞·ªõc th√™m hai tri·ªáu ng∆∞·ªùi b·∫±ng c√°ch s·ª≠ d·ª•ng d·∫•u ch·∫•m (object.population), v√† sau ƒë√≥ gi·∫£m ƒëi hai tri·ªáu ng∆∞·ªùi b·∫±ng d·∫•u ngo·∫∑c (object['population']) ƒë·ªÉ truy c·∫≠p v√†o c√°c thu·ªôc t√≠nh.

myCountry.population += 2;

console.log(
  `‚óº Increase the population of the country by two million people :`,
  myCountry.population
);

myCountry["population"] = myCountry["population"] - 2;

console.log(
  `‚óº Reduce the population of the country by two million people :`,
  myCountry.population
);

// Lab 5.3. Ph∆∞∆°ng th·ª©c Object
console.log("Lab 5.3. Ph∆∞∆°ng th·ª©c Object ==>");

// 1. Th√™m m·ªôt ph∆∞∆°ng th·ª©c c√≥ t√™n l√† 'describe' v√†o object 'myCountry'. Ph∆∞∆°ng th·ª©c n√†y s·∫Ω in m·ªôt string ra console v·ªõi n·ªôi dung nh∆∞ sau: "Finland has 6 million finnish-speaking people, 3 neighbouring countries and a capital called Helsinki" nh∆∞ng l·∫ßn n√†y s·ª≠ d·ª•ng t·ª´ kh√≥a 'this'.
myCountry.describe = function () {
  console.log(
    ` ${this.country} has ${this.population} million ${this.language}-speaking people, ${this.neighbours.length} neighbouring countries and a capital called ${this.capital}.`
  );
};

// 2. G·ªçi ph∆∞∆°ng th·ª©c 'describe'
myCountry.describe();
// console.log(myCountry);

// 3. Th√™m ph∆∞∆°ng th·ª©c 'checkIsland' v√†o object 'myCountry'. Ph∆∞∆°ng th·ª©c n√†y s·∫Ω thi·∫øt l·∫≠p m·ªôt thu·ªôc t√≠nh m·ªõi tr√™n object l√† 'isIsland'. 'isIsland' s·∫Ω l√† gi√° tr·ªã true n·∫øu kh√¥ng c√≥ n∆∞·ªõc l√°ng gi·ªÅng, ng∆∞·ª£c l·∫°i l√† false. S·ª≠ d·ª•ng to√°n t·ª≠ ƒëi·ªÅu ki·ªán ƒë·ªÉ ƒë·∫∑t gi√° tr·ªã cho thu·ªôc t√≠nh.
myCountry.checkIsland = function () {
  this.isIsland = this.neighbours.length === 0 ? true : false;
  // this.isIsland = !Boolean(this.neighbours.length);
};
// G·ªçi ph∆∞∆°ng th·ª©c 'checkIsland'
myCountry.checkIsland();
console.log(myCountry.isIsland);

// Lab 5.4. V√≤ng l·∫∑p For
console.log("Lab 5.4. V√≤ng l·∫∑p For ==>");
// ·ªû ƒë·∫•t n∆∞·ªõc b·∫°n c√≥ c√°c cu·ªôc b·∫ßu c·ª≠. ·ªû m·ªôt th·ªã tr·∫•n nh·ªè, ch·ªâ c√≥ 50 c·ª≠ tri. S·ª≠ d·ª•ng v√≤ng l·∫∑p for ƒë·ªÉ m√¥ ph·ªèng 50 c·ª≠ tri n√†y, b·∫±ng c√°ch in string sau ra console (cho c√°c s·ªë t·ª´ 1 ƒë·∫øn 50): 'Voter number 1 is currently voting'.

for (let rep = 1; rep <= 50; rep++) {
  console.log(`Voter number ${rep} is currently voting üì¢`);
}

// Lab 5.5. L·∫∑p trong array, break v√† continue
console.log("Lab 5.5. L·∫∑p trong array, break v√† continue ==>");

// 1. H√£y l·∫•y l·∫°i array 'populations' t·ª´ b√†i lab tr∆∞·ªõc.
const populations = [98, 38, 125, 70];
console.log("Populations:", populations);
console.log(populations.length);

// 2. S·ª≠ d·ª•ng v√≤ng l·∫∑p for ƒë·ªÉ t·∫°o array 'percentages2' ch·ª©a ph·∫ßn trƒÉm d√¢n s·ªë th·∫ø gi·ªõi cho 4 gi√° tr·ªã population. S·ª≠ d·ª•ng h√†m 'percentageOfWorld1' m√† b·∫°n ƒë√£ t·∫°o tr∆∞·ªõc ƒë√≥.
let populationWorld = 7900;
const percentages2 = [];

for (let i = 0; i < populations.length; i++) {
  percentages2.push((populations[i] / populationWorld) * 100);
}
console.log("Percentages2 :", percentages2);

// 3. X√°c nh·∫≠n r·∫±ng 'percentages2' ch·ª©a ch√≠nh x√°c c√°c gi√° tr·ªã trong array 'percentages' m√† ch√∫ng ta ƒë√£ t·∫°o theo c√°ch th·ªß c√¥ng ·ªü lab tr∆∞·ªõc, ƒë·ªÉ xem gi·∫£i ph√°p n√†y t·ªët h∆°n nh∆∞ th·∫ø n√†o.
const percentageOfWorld1 = function (population) {
  return (population / populationWorld) * 100;
};
const percentages = [
  percentageOfWorld1(populations[0]),
  percentageOfWorld1(populations[1]),
  percentageOfWorld1(populations[2]),
  percentageOfWorld1(populations[3]),
];
console.log("Percentages :", percentages);

//  ==> K·∫øt h·ª£p v√≤ng l·∫∑p v√† array ƒë·ªÉ th·ª±c hi·ªán c√°c to√°n t·ª≠ v·ªõi array l√† gi·∫£i ph√°p t·ªët h∆°n, h∆∞u √≠ch v√† quan tr·ªçng.

// Lab 5.6. V√≤ng l·∫∑p ng∆∞·ª£c v√† V√≤ng l·∫∑p trong v√≤ng l·∫∑p
console.log("Lab 5.6. V√≤ng l·∫∑p ng∆∞·ª£c v√† V√≤ng l·∫∑p trong v√≤ng l·∫∑p ==>");

// 1. L∆∞u tr·ªØ array c·ªßa nh·ªØng array n√†y v√†o bi·∫øn 'listOfNeighbours' [['Canada', 'Mexico'], ['Spain'], ['Norway', 'Sweden', 'Russia']];
const listOfNeighbours = [
  ["Canada", "Mexico"],
  ["Span"],
  ["Norway", "Sweden", "Russia"],
];
console.log(listOfNeighbours);

// 2. Hi·ªÉn th·ªã c√°c qu·ªëc gia l√°ng gi·ªÅng v√†o m√†n h√¨nh console, kh√¥ng ph·∫£i to√†n b·ªô array. V√≠ d·ª• 'Neighbour: Canada' cho t·ª´ng qu·ªëc gia.

// for (let i = listOfNeighbours.length - 1; i >= 0; i--) {
//     console.log('Neighbours: ', i, listOfNeighbours[i]);
// }

// B·∫°n s·∫Ω c·∫ßn m·ªôt v√≤ng l·∫∑p b√™n trong v√≤ng l·∫∑p cho ƒëi·ªÅu n√†y.
for (let i = 0; i < listOfNeighbours.length; i++) {
  // let listX = listOfNeighbours[i].length;
  console.log(` ---- Neighbours: ${i} `);
  for (let rep = 0; rep < listOfNeighbours[i].length; rep++) {
    console.log(`---- Neighbours: ${listOfNeighbours[i][rep]}`);
  }
}

// console.log('Neighbours: ', listOfNeighbours[0]);
// console.log('Neighbours: ', listOfNeighbours[1]);
// console.log('Neighbours: ', listOfNeighbours[2]);

// Lab 5.7. V√≤ng l·∫∑p While
console.log("Lab 5.7. V√≤ng l·∫∑p While ==>");

// 1. L·∫•y l·∫°i t·ª´ lab L·∫∑p trong array, break v√† continue, nh∆∞ng l·∫ßn n√†y h√£y s·ª≠ d·ª±ng v√≤ng l·∫∑p while (g·ªçi array 'percentages3').
const percentages3 = [];

let rep = 0;
while (rep < populations.length) {
  percentages3.push((populations[rep] / populationWorld) * 100);
  rep++;
}
console.log("Percentages3 :", percentages3);

// 2. B·∫°n th√≠ch gi·∫£i ph√°p n√†o h∆°n cho nhi·ªám v·ª• n√†y: v√≤ng l·∫∑p for hay v√≤ng l·∫∑p while?

// Lab 5.8: B√†i to√°n t·ªïng h·ª£p #4
console.log("Lab 5.8: B√†i to√°n t·ªïng h·ª£p #4 ==>");

// Lab 5.8.1. So s√°nh ch·ªâ s·ªë IBM (ph·∫ßn 3)
console.log("Lab 5.8.1. So s√°nh ch·ªâ s·ªë IBM (ph·∫ßn 3) ==>");

// 1. Nhi·ªám v·ª• c·ªßa b·∫°n:
// V·ªõi m·ªói ng∆∞·ªùi (Mark Miller v√† John Smith), h√£y t·∫°o m·ªôt object c√≥ c√°c thu·ªôc t√≠nh nh∆∞ full name, mass, and height
// 2. D·ªØ li·ªáu ki·ªÉm tra: Marks n·∫∑ng 78 kg v√† cao 1m69. John n·∫∑ng 92kg v√† cao 1m95.
const mark = {
  fullName: "Mark Miller",
  mass: 78,
  height: 1.69,
  //T·∫°o ph∆∞∆°ng th·ª©c 'calcBMI' ·ªü m·ªói object ƒë·ªÉ t√≠nh BMI
  calcBMI: function () {
    //  L∆∞u gi√° tr·ªã BMI v√†o m·ªôt thu·ªôc t√≠nh
    this.bmi = this.mass / this.height ** 2;
    // tr·∫£ v·ªÅ t·ª´ ph∆∞∆°ng th·ª©c.
    return this.bmi;
  },
};

const john = {
  fullName: "John Smith",
  mass: 92,
  height: 1.95,
  calcBMI: function () {
    this.bmi = this.mass / this.height ** 2;
    return this.bmi;
  },
};
console.log(mark, john);
console.log(mark.calcBMI(), john.calcBMI());

const markBMI = mark.calcBMI().toFixed(1);
const johnBMI = john.calcBMI().toFixed(1);
// In ra console ng∆∞·ªùi c√≥ BMI cao h∆°n c√πng v·ªõi t√™n ƒë·∫ßy ƒë·ªß v√† BMI t∆∞∆°ng ·ª©ng. V√≠ d·ª•: "John's BMI (28.3) is higher than Mark's (23.9)!"
if (mark.bmi > john.bmi) {
  console.log(
    `${mark.fullName}'s BMI (${markBMI}) is higher than ${john.fullName}'s (${johnBMI})!`
  );
} else if (john.bmi > mark.bmi) {
  console.log(
    `${john.fullName}'s BMI (${johnBMI}) is higher than ${mark.fullName}'s (${markBMI})!`
  );
}

// Lab 5.8.2. C·∫£i thi·ªán Tip calculator
console.log("Lab 5.8.2. C·∫£i thi·ªán Tip calculator ==>");

// T·∫°o array 'bills' ch·ª©a t·∫•t c·∫£ 10 gi√° tr·ªã h√≥a ƒë∆°n ki·ªÉm tra.
const bills = [22, 295, 176, 440, 37, 105, 10, 1100, 86, 52];
// T·∫°o c√°c array r·ªóng cho 'tips' v√† 'totals'.
const tips = [];
const totals = [];

// S·ª≠ d·ª•ng h√†m 'calcTip' m√† ch√∫ng ta ƒë√£ vi·∫øt tr∆∞·ªõc ƒë√≥ (kh√¥ng c·∫ßn l·∫∑p l·∫°i) ƒë·ªÉ t√≠nh c√°c gi√° tr·ªã tips v√† totals (h√≥a ƒë∆°n + ti·ªÅn boa) cho m·ªói gi√° tr·ªã bill trong bills array. S·ª≠ d·ª•ng v√≤ng l·∫∑p for ƒë·ªÉ th·ª±c hi·ªán 10 ph√©p t√≠nh!.
const calTip = function (bill) {
  return bill <= 300 && bill >= 50 ? bill * 0.15 : bill * 0.2;
};

for (let i = 0; i < bills.length; i++) {
  // G·ªçi ‚ÄòcalcTip‚Äò trong v√≤ng l·∫∑p v√† d√πng ph∆∞∆°ng th·ª©c push ƒë·ªÉ th√™m gi√° tr·ªã cho c√°c array tips v√† totals.
  const tip = calTip(bills[i]);
  tips.push(tip);
  totals.push(tip + bills[i]);
}
console.log(tips, totals);

// Bonus: Vi·∫øt h√†m 'calcAverage' nh·∫≠n array 'arr' l√†m ƒë·ªëi s·ªë. H√†m n√†y t√≠nh trung b√¨nh t·∫•t c·∫£ c√°c s·ªë ƒë√£ cho trong array. ƒê√¢y l√† m·ªôt th·ª≠ th√°ch kh√≥ (ch√∫ng ta ch∆∞a t·ª´ng th·ª±c hi·ªán ƒëi·ªÅu n√†y tr∆∞·ªõc ƒë√¢y)! D∆∞·ªõi ƒë√¢y l√† h∆∞·ªõng d·∫´n th·ª±c hi·ªán:

const calcAverage = function (arr) {
  let sum = 0;
  for (let i = 0; i < arr.length; i++) {
    sum = sum + arr[i];
  }
  // console.log(sum);
  return sum / arr.length;
};

console.log(calcAverage([2, 3, 7]));
console.log(calcAverage(tips));
console.log(calcAverage(totals));

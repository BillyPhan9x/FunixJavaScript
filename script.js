"use strict";

// Lab 12.1: Ph√¢n lo·∫°i th√∫ c∆∞ng
console.log("Lab 12.1: Ph√¢n lo·∫°i th√∫ c∆∞ng ==>");

// Lab 12.1 Ph√¢n lo·∫°i th√∫ c∆∞ng

// T·∫°o h√†m 'checkDogs', nh·∫≠n 2 array tu·ªïi c·ªßa ch√≥ ('dogJulia' v√† 'dogKate')
const checkDogs = function (dogJuila, dogKate) {
  // Julia ph√°t hi·ªán ra r·∫±ng ch·ªß nh√¢n c·ªßa ch√∫ ch√≥ ƒë·∫ßu ti√™n v√† cu·ªëi c√πng th·ª±c ra nu√¥i m√®o ch·ª© kh√¥ng ph·∫£i ch√≥!
  const newDogJuila = dogJuila.slice();
  newDogJuila.splice(0, 1);
  newDogJuila.splice(-1);
  console.log(newDogJuila);

  // T·∫°o m·ªôt array v·ªõi c·∫£ d·ªØ li·ªáu c·ªßa Julia (ƒë√£ s·ª≠a) v√† c·ªßa Kate.
  const dogs = newDogJuila.concat(dogKate);
  console.log(dogs);

  // ƒê·ªëi v·ªõi m·ªói ch√∫ ch√≥ c√≤n l·∫°i, h√£y in ra console ƒë√≥ l√† ch√∫ ch√≥ tr∆∞·ªüng th√†nh
  dogs.forEach(function (dog, i) {
    if (dog >= 3) {
      console.log(`Dog number ${i + 1} is an adult, and is ${dog} years old`);
    } else {
      console.log(`Dog number ${i + 1} is still a puppy üê∂`);
    }
  });
};
// Ch·∫°y h√†m cho c·∫£ hai t·∫≠p d·ªØ li·ªáu ki·ªÉm tra.
// D·ªØ li·ªáu 1: D·ªØ li·ªáu c·ªßa Julia [3, 5, 2, 12, 7], d·ªØ li·ªáu c·ªßa Kate [4, 1, 15, 8, 3]
checkDogs([3, 5, 2, 12, 7], [4, 1, 15, 8, 3]);
// D·ªØ li·ªáu 2: D·ªØ li·ªáu c·ªßa Julia [9, 16, 6, 8, 3], d·ªØ li·ªáu c·ªßa Kate [10, 5, 6, 1, 4]
checkDogs([9, 16, 6, 8, 3], [10, 5, 6, 1, 4]);

//////////////////////////////////////
// Lab 12.2: Chuy·ªÉn ƒë·ªïi tu·ªïi th√∫ c∆∞ng
console.log("");
console.log("Lab 12.2: Chuy·ªÉn ƒë·ªïi tu·ªïi th√∫ c∆∞ng ==>");

// T·∫°o h√†m 'calcAverageHumanAge', h√†m n√†y nh·∫≠n array tu·ªïi c·ªßa ch√≥ ('age')
const calcAverageHumanAge = function (ages) {
  // T√≠nh tu·ªïi c·ªßa ch√≥ theo nƒÉm nh∆∞ tu·ªïi ng∆∞·ªùi
  const humanAge = ages.map(function (age) {
    if (age <= 2) {
      return 2 * age;
    } else {
      return 16 + age * 4;
    }
  });
  console.log(humanAge);

  //   Lo·∫°i tr·ª´ t·∫•t c·∫£ nh·ªØng ch√∫ ch√≥ c√≥ humanAge d∆∞·ªõi 18
  const adults = humanAge.filter(function (age) {
    return age % 2 >= 0;
  });
  console.log(adults);

  //   T√≠nh humanage trung b√¨nh c·ªßa c√°c ch√∫ ch√≥ tr∆∞·ªüng th√†nh
  const average = adults.reduce((acc, age) => acc + age, 0) / adults.length;
  return average;
};

// D·ªØ li·ªáu 1: [5, 2, 4, 1, 15, 8, 3]
const test1 = calcAverageHumanAge([5, 2, 4, 1, 15, 8, 3]);
// D·ªØ li·ªáu 2: [16, 6, 10, 5, 6, 1, 4]
const test2 = calcAverageHumanAge([16, 6, 10, 5, 6, 1, 4]);
console.log("D·ªØ li·ªáu 1:", test1, "D·ªØ li·ªáu 2:", test2);

//////////////////////////////////
// Lab 12.3: S·ª≠ d·ª•ng Arrow Function
console.log("");
console.log("Lab 12.3: S·ª≠ d·ª•ng Arrow Function ==>");

// Vi·∫øt l·∫°i h√†m 'calcAverageHumanAge' t·ª´ Lab 12.2, nh∆∞ng l·∫ßn n√†y l√† h√†m m≈©i t√™n v√† s·ª≠ d·ª•ng chaining!
const calcAverageHumanAgeNew = (ages) => {
  const averageHumanAges = ages
    .map((age) => (age <= 2 ? 2 * age : 16 + age * 4))
    .filter((age) => age >= 18)
    .reduce((acc, age, i, arr) => acc + age / arr.length, arr[0]);
  return averageHumanAges;
};

// D·ªØ li·ªáu 1: [5, 2, 4, 1, 15, 8, 3]
const data1 = calcAverageHumanAge([5, 2, 4, 1, 15, 8, 3]);
// D·ªØ li·ªáu 2: [16, 6, 10, 5, 6, 1, 4]
const data2 = calcAverageHumanAge([16, 6, 10, 5, 6, 1, 4]);
console.log("D·ªØ li·ªáu 1:", data1, "D·ªØ li·ªáu 2:", data2);
